generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  BOOKED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  EXPIRED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String
  role      Role       @default(USER) 
  bookings  Booking[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Event {
  id        String    @id @default(uuid())
  title     String
  date      DateTime
  seats     Seat[]
  bookings  Booking[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@map("events")
}

model Seat {
  id        String     @id @default(uuid())
  number    String
  status    SeatStatus @default(AVAILABLE)
  eventId   String
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  booking   Booking[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([eventId, number])  // no duplicate seat numbers within same event
  @@map("seats")
}

model Booking {
  id         String      @id @default(uuid())
  userId     String
  eventId    String
  seatId     String
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  expiresAt  DateTime?   // set for pending holds

  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  seat       Seat   @relation(fields: [seatId], references: [id], onDelete: Cascade)

  @@unique([eventId, seatId, status], name: "unique_event_seat_status") // prevents two CONFIRMED for same seat+event if you filter by status later; we'll rely on service checks for PENDING->CONFIRMED race
  @@map("bookings")
}
